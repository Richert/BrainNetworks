%YAML 1.2
---

# Operator templates
####################

delay_test:
  base: OperatorTemplate
  equations:
    - "r_out = r_in + sin(2.0*PI*5.0*t)"
  variables:
    r_out:
      default: output
    r_in:
      default: input
    u:
      default: input
    t:
      default: variable

biexp:
  base: OperatorTemplate
  equations:
    - "d/dt * I = X"
    - "d/dt * X = (k*inp - X*(tau_d+tau_r) - I)/(tau_r*tau_d)"
  variables:
    I:
      default: variable
    X:
      default: variable
    k:
      default: 1.0
    inp:
      default: input
    tau_r:
      default: 10.00
    tau_d:
      default: 200.0


biexp2:
  base: OperatorTemplate
  equations:
    - "d/dt * I = ((X-Z)*alpha*beta/(beta-alpha)-I)/0.1"
    - "d/dt * X = k*inp - alpha*X"
    - "d/dt * Z = k*inp - beta*Z"
  variables:
    I:
      default: variable
    X:
      default: variable
    Z:
      default: variable
    k:
      default: 1.0
    inp:
      default: input
    alpha:
      default: 0.01
    beta:
      default: 0.5

qif_simple:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + J_ee*R_e - J_ei*R_i - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + J_ie*R_e - J_ii*R_i - tau_i*(PI*R_i)^2"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    delta_e:
      default: 1.0
    delta_i:
      default: 1.0
    tau_e:
      default: 12.8
    tau_i:
      default: 25.4
    eta_e:
      default: 3.0
    eta_i:
      default: 10.0
    J_ee:
      default: 5.0
    J_ei:
      default: 30.0
    J_ie:
      default: 40.0
    J_ii:
      default: 20.0

qif_single_alpha:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + J_e*R_e*(1.0-I_a) - tau_e*(PI*R_e)^2"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*R_e - 2.0*X_a - I_a/tau_a)/tau_a"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    I_a:
      default: variable
    X_a:
      default: variable
    delta_e:
      default: 2.0
    tau_e:
      default: 1.0
    tau_a:
      default: 10.0
    eta_e:
      default: -5.6809865
    J_e:
      default: 21.2132
    alpha:
      default: 0.05

qif_alpha:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k*J_ee*R_e - k*J_ei*R_i*(1.0-I_a) - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k*J_ie*R_e*(1.0-I_b) - k*J_ii*R_i*(1.0-I_a) - tau_i*(PI*R_i)^2"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*beta*R_i - 2.0*X_a - I_a/tau_a)/tau_a"
    - "d/dt * I_b = X_b"
    - "d/dt * X_b = (alpha*R_e - 2.0*X_b - I_b/tau_b)/tau_b"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    I_a:
      default: variable
    X_a:
      default: variable
    I_b:
      default: variable
    X_b:
      default: variable
    delta_e:
      default: 2.0
    delta_i:
      default: 2.0
    tau_e:
      default: 12.0
    tau_i:
      default: 26.0
    tau_a:
      default: 100.0
    tau_b:
      default: 200.0
    eta_e:
      default: 4.0
    eta_i:
      default: -3.0
    J_ee:
      default: 0.0
    J_ei:
      default: 40.0
    J_ie:
      default: 40.0
    J_ii:
      default: 12.0
    alpha:
      default: 0.01
    beta:
      default: 2.0
    k:
      default: 1.0


qif_full:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_ee*(1.0-I_ee_a) - I_ei*(1.0-I_ei_a) - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + eta_str + eta_tha)/tau_i + I_ie*(1.0-I_ie_a) - I_ii*(1.0-I_ii_a) - tau_i*(PI*R_i)^2"
    - "d/dt * I_ee = X_ee"
    - "d/dt * X_ee = (k*k_ee*R_e - X_ee*(tau_ee_r+tau_ee_d) - I_ee)/(tau_ee_r*tau_ee_d)"
    - "d/dt * I_ei = X_ei"
    - "d/dt * X_ei = (k*k_i*k_ei*R_i16 - X_ei*(tau_ei_r+tau_ei_d) - I_ei)/(tau_ei_r*tau_ei_d)"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = (k*k_ie*R_e16 - X_ie*(tau_ie_r+tau_ie_d) - I_ie)/(tau_ie_r*tau_ie_d)"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = (k*k_i*k_ii*R_i - X_ii*(tau_ii_r+tau_ii_d) - I_ii)/(tau_ii_r*tau_ii_d)"
    - "d/dt * I_ii_a = X_ii_a"
    - "d/dt * X_ii_a = (a_ii*R_i16 - 2.0*X_ii_a - I_ii_a/tau_a)/tau_a"
    - "d/dt * I_ei_a = X_ei_a"
    - "d/dt * X_ei_a = (a_ei*R_i16 - 2.0*X_ei_a - I_ei_a/tau_a)/tau_a"
    - "d/dt * I_ie_a = X_ie_a"
    - "d/dt * X_ie_a = (a_ie*R_e16 - 2.0*X_ie_a - I_ie_a/tau_a)/tau_a"
    - "d/dt * I_ee_a = X_ee_a"
    - "d/dt * X_ee_a = (a_ii*R_e16 - 2.0*X_ee_a - I_ee_a/tau_a)/tau_a"
    - "d/dt * R_e1 = (R_e - R_e1)*16.0/d_e"
    - "d/dt * R_e2 = (R_e1 - R_e2)*16.0/d_e"
    - "d/dt * R_e3 = (R_e2 - R_e3)*16.0/d_e"
    - "d/dt * R_e4 = (R_e3 - R_e4)*16.0/d_e"
    - "d/dt * R_e5 = (R_e4 - R_e5)*16.0/d_e"
    - "d/dt * R_e6 = (R_e5 - R_e6)*16.0/d_e"
    - "d/dt * R_e7 = (R_e6 - R_e7)*16.0/d_e"
    - "d/dt * R_e8 = (R_e7 - R_e8)*16.0/d_e"
    - "d/dt * R_e9 = (R_e8 - R_e9)*16.0/d_e"
    - "d/dt * R_e10 = (R_e9 - R_e10)*16.0/d_e"
    - "d/dt * R_e11 = (R_e10 - R_e11)*16.0/d_e"
    - "d/dt * R_e12 = (R_e11 - R_e12)*16.0/d_e"
    - "d/dt * R_e13 = (R_e12 - R_e13)*16.0/d_e"
    - "d/dt * R_e14 = (R_e13 - R_e14)*16.0/d_e"
    - "d/dt * R_e15 = (R_e14 - R_e15)*16.0/d_e"
    - "d/dt * R_e16 = (R_e15 - R_e16)*16.0/d_e"
    - "d/dt * R_i1 = (R_i - R_i1)*16.0/d_i"
    - "d/dt * R_i2 = (R_i1 - R_i2)*16.0/d_i"
    - "d/dt * R_i3 = (R_i2 - R_i3)*16.0/d_i"
    - "d/dt * R_i4 = (R_i3 - R_i4)*16.0/d_i"
    - "d/dt * R_i5 = (R_i4 - R_i5)*16.0/d_i"
    - "d/dt * R_i6 = (R_i5 - R_i6)*16.0/d_i"
    - "d/dt * R_i7 = (R_i6 - R_i7)*16.0/d_i"
    - "d/dt * R_i8 = (R_i7 - R_i8)*16.0/d_i"
    - "d/dt * R_i9 = (R_i8 - R_i9)*16.0/d_i"
    - "d/dt * R_i10 = (R_i9 - R_i10)*16.0/d_i"
    - "d/dt * R_i11 = (R_i10 - R_i11)*16.0/d_i"
    - "d/dt * R_i12 = (R_i11 - R_i12)*16.0/d_i"
    - "d/dt * R_i13 = (R_i12 - R_i13)*16.0/d_i"
    - "d/dt * R_i14 = (R_i13 - R_i14)*16.0/d_i"
    - "d/dt * R_i15 = (R_i14 - R_i15)*16.0/d_i"
    - "d/dt * R_i16 = (R_i15 - R_i16)*16.0/d_i"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    I_ee:
      default: variable
    I_ei:
      default: variable
    I_ie:
      default: variable
    I_ii:
      default: variable
    I_ee_a:
      default: variable
    I_ei_a:
      default: variable
    I_ie_a:
      default: variable
    I_ii_a:
      default: variable
    X_ee:
      default: variable
    X_ei:
      default: variable
    X_ie:
      default: variable
    X_ii:
      default: variable
    X_ee_a:
      default: variable
    X_ei_a:
      default: variable
    X_ie_a:
      default: variable
    X_ii_a:
      default: variable
    eta_e:
      default: -2.0
    eta_i:
      default: 2.0
    eta_str:
      default: -10.0
    eta_tha:
      default: 0.0
    k_ee:
      default: 2.9
    k_ei:
      default: 30.4
    k_ie:
      default: 97.9
    k_ii:
      default: 7.2
    k:
      default: 1.0
    k_i:
      default: 1.0
    tau_e:
      default: 12.8
    tau_i:
      default: 25.4
    tau_ee_r:
      default: 0.8
    tau_ee_d:
      default: 3.7
    tau_ei_r:
      default: 0.8
    tau_ei_d:
      default: 10.0
    tau_ie_r:
      default: 0.8
    tau_ie_d:
      default: 3.7
    tau_ii_r:
      default: 0.5
    tau_ii_d:
      default: 5.0
    tau_a:
      default: 500.0
    a_ee:
      default: 0.0
    a_ei:
      default: 0.0
    a_ie:
      default: 0.0
    a_ii:
      default: 0.0
    delta_e:
      default: 1.0
    delta_i:
      default: 1.0
    d_e:
      default: 4.0
    d_i:
      default: 4.0
    R_e1:
      default: variable
    R_e2:
      default: variable
    R_e3:
      default: variable
    R_e4:
      default: variable
    R_e5:
      default: variable
    R_e6:
      default: variable
    R_e7:
      default: variable
    R_e8:
      default: variable
    R_e9:
      default: variable
    R_e10:
      default: variable
    R_e11:
      default: variable
    R_e12:
      default: variable
    R_e13:
      default: variable
    R_e14:
      default: variable
    R_e15:
      default: variable
    R_e16:
      default: variable
    R_i1:
      default: variable
    R_i2:
      default: variable
    R_i3:
      default: variable
    R_i4:
      default: variable
    R_i5:
      default: variable
    R_i6:
      default: variable
    R_i7:
      default: variable
    R_i8:
      default: variable
    R_i9:
      default: variable
    R_i10:
      default: variable
    R_i11:
      default: variable
    R_i12:
      default: variable
    R_i13:
      default: variable
    R_i14:
      default: variable
    R_i15:
      default: variable
    R_i16:
      default: variable


qif_driver:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e*tau_e) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e*V_e + eta_e)/tau_e + I_ee - I_ei*(1.0-I_a) - tau_e*(PI*PI*R_e*R_e)"
    - "d/dt * R_i = delta_i/(PI*tau_i*tau_i) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i*V_i + eta_i + eta_str + eta_tha + beta*X)/tau_i + I_ie - I_ii*(1.0-I_a) - tau_i*(PI*PI*R_i*R_i)"
    - "d/dt * I_ee = X_ee"
    - "d/dt * X_ee = (k*k_ee*R_e - X_ee*(tau_ee_r+tau_ee_d) - I_ee)/(tau_ee_r*tau_ee_d)"
    - "d/dt * I_ei = X_ei"
    - "d/dt * X_ei = (k*k_i*k_ei*R_i16 - X_ei*(tau_ei_r+tau_ei_d) - I_ei)/(tau_ei_r*tau_ei_d)"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = (k*k_ie*R_e16 - X_ie*(tau_ie_r+tau_ie_d) - I_ie)/(tau_ie_r*tau_ie_d)"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = (k*k_i*k_ii*R_i - X_ii*(tau_ii_r+tau_ii_d) - I_ii)/(tau_ii_r*tau_ii_d)"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*R_i - 2.0*X_a - I_a/tau_a)/tau_a"
    - "d/dt * R_e1 = (R_e - R_e1)*16.0/d_e"
    - "d/dt * R_e2 = (R_e1 - R_e2)*16.0/d_e"
    - "d/dt * R_e3 = (R_e2 - R_e3)*16.0/d_e"
    - "d/dt * R_e4 = (R_e3 - R_e4)*16.0/d_e"
    - "d/dt * R_e5 = (R_e4 - R_e5)*16.0/d_e"
    - "d/dt * R_e6 = (R_e5 - R_e6)*16.0/d_e"
    - "d/dt * R_e7 = (R_e6 - R_e7)*16.0/d_e"
    - "d/dt * R_e8 = (R_e7 - R_e8)*16.0/d_e"
    - "d/dt * R_e9 = (R_e8 - R_e9)*16.0/d_e"
    - "d/dt * R_e10 = (R_e9 - R_e10)*16.0/d_e"
    - "d/dt * R_e11 = (R_e10 - R_e11)*16.0/d_e"
    - "d/dt * R_e12 = (R_e11 - R_e12)*16.0/d_e"
    - "d/dt * R_e13 = (R_e12 - R_e13)*16.0/d_e"
    - "d/dt * R_e14 = (R_e13 - R_e14)*16.0/d_e"
    - "d/dt * R_e15 = (R_e14 - R_e15)*16.0/d_e"
    - "d/dt * R_e16 = (R_e15 - R_e16)*16.0/d_e"
    - "d/dt * R_i1 = (R_i - R_i1)*16.0/d_i"
    - "d/dt * R_i2 = (R_i1 - R_i2)*16.0/d_i"
    - "d/dt * R_i3 = (R_i2 - R_i3)*16.0/d_i"
    - "d/dt * R_i4 = (R_i3 - R_i4)*16.0/d_i"
    - "d/dt * R_i5 = (R_i4 - R_i5)*16.0/d_i"
    - "d/dt * R_i6 = (R_i5 - R_i6)*16.0/d_i"
    - "d/dt * R_i7 = (R_i6 - R_i7)*16.0/d_i"
    - "d/dt * R_i8 = (R_i7 - R_i8)*16.0/d_i"
    - "d/dt * R_i9 = (R_i8 - R_i9)*16.0/d_i"
    - "d/dt * R_i10 = (R_i9 - R_i10)*16.0/d_i"
    - "d/dt * R_i11 = (R_i10 - R_i11)*16.0/d_i"
    - "d/dt * R_i12 = (R_i11 - R_i12)*16.0/d_i"
    - "d/dt * R_i13 = (R_i12 - R_i13)*16.0/d_i"
    - "d/dt * R_i14 = (R_i13 - R_i14)*16.0/d_i"
    - "d/dt * R_i15 = (R_i14 - R_i15)*16.0/d_i"
    - "d/dt * R_i16 = (R_i15 - R_i16)*16.0/d_i"
    - "d/dt * X = X + omega*2.0*PI*Z - X*(X*X+Z*Z)"
    - "d/dt * Z = Z - omega*2.0*PI*X - Z*(X*X+Z*Z)"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    I_ee:
      default: variable
    I_ei:
      default: variable
    I_ie:
      default: variable
    I_ii:
      default: variable
    I_a:
      default: variable
    X_ee:
      default: variable
    X_ei:
      default: variable
    X_ie:
      default: variable
    X_ii:
      default: variable
    X_a:
      default: variable
    X:
      default: variable
    Z:
      default: variable(1.0)
    eta_e:
      default: -3.0
    eta_i:
      default: 16.6
    eta_str:
      default: -20.0
    eta_tha:
      default: 18.8
    k_ee:
      default: 2.9
    k_ei:
      default: 30.4
    k_ie:
      default: 97.9
    k_ii:
      default: 7.2
    k:
      default: 1.0
    k_i:
      default: 1.0
    tau_e:
      default: 6.0
    tau_i:
      default: 14.0
    tau_ee_r:
      default: 0.8
    tau_ee_d:
      default: 3.7
    tau_ei_r:
      default: 0.8
    tau_ei_d:
      default: 10.0
    tau_ie_r:
      default: 0.8
    tau_ie_d:
      default: 3.7
    tau_ii_r:
      default: 0.5
    tau_ii_d:
      default: 5.0
    tau_a:
      default: 500.0
    alpha:
      default: 0.0
    delta_e:
      default: 2.8
    delta_i:
      default: 1.5
    d_e:
      default: 4.0
    d_i:
      default: 4.0
    beta:
      default: 1.0
    omega:
      default: 0.02
    R_e1:
      default: variable
    R_e2:
      default: variable
    R_e3:
      default: variable
    R_e4:
      default: variable
    R_e5:
      default: variable
    R_e6:
      default: variable
    R_e7:
      default: variable
    R_e8:
      default: variable
    R_e9:
      default: variable
    R_e10:
      default: variable
    R_e11:
      default: variable
    R_e12:
      default: variable
    R_e13:
      default: variable
    R_e14:
      default: variable
    R_e15:
      default: variable
    R_e16:
      default: variable
    R_i1:
      default: variable
    R_i2:
      default: variable
    R_i3:
      default: variable
    R_i4:
      default: variable
    R_i5:
      default: variable
    R_i6:
      default: variable
    R_i7:
      default: variable
    R_i8:
      default: variable
    R_i9:
      default: variable
    R_i10:
      default: variable
    R_i11:
      default: variable
    R_i12:
      default: variable
    R_i13:
      default: variable
    R_i14:
      default: variable
    R_i15:
      default: variable
    R_i16:
      default: variable


qif_stn_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + g_e*(1-I_ae)*I_ampa + (1-g_e)*I_nmda - g_i*(1-I_ai)*I_gabaa - (1-g_i)*I_gabab - tau_e*(PI*R_e)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ee*R_e + k_ctx*ctx - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_nmda = X_nmda"
    - "d/dt * X_nmda = (k_ee*R_e + k_ctx*ctx - X_nmda*(tau_nmda_r+tau_nmda_d) - I_nmda)/(tau_nmda_r*tau_nmda_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ei*r_ei - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
    - "d/dt * I_gabab = X_gabab"
    - "d/dt * X_gabab = (k_ei*r_ei - X_gabab*(tau_gabab_r+tau_gabab_d) - I_gabab)/(tau_gabab_r*tau_gabab_d)"
    - "d/dt * I_ae = X_ae"
    - "d/dt * X_ae = (a_e*I_ampa - X_ae*(tau_ae_r+tau_ae_d) - I_ae)/(tau_ae_r*tau_ae_d)"
    - "d/dt * I_ai = X_ai"
    - "d/dt * X_ai = (a_i*I_gabaa - X_ai*(tau_ai_r+tau_ai_d) - I_ai)/(tau_ai_r*tau_ai_d)"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    I_ampa:
      default: variable
    I_nmda:
      default: variable
    I_gabaa:
      default: variable
    I_gabab:
      default: variable
    I_ae:
      default: variable
    I_ai:
      default: variable
    X_ampa:
      default: variable
    X_nmda:
      default: variable
    X_gabaa:
      default: variable
    X_gabab:
      default: variable
    X_ae:
      default: variable
    X_ai:
      default: variable
    eta_e:
      default: 10.0
    k_ee:
      default: 3.0
    k_ei:
      default: 20.0
    k_ctx:
      default: 100.0
    g_e:
      default: 0.8
    g_i:
      default: 1.0
    a_e:
      default: 0.2
    a_i:
      default: 0.5
    tau_e:
      default: 12.8
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.8
    tau_gabaa_d:
      default: 10.0
    tau_nmda_r:
      default: 2.0
    tau_nmda_d:
      default: 90.0
    tau_gabab_r:
      default: 4.0
    tau_gabab_d:
      default: 150.0
    tau_ae_r:
      default: 10.0
    tau_ae_d:
      default: 200.0
    tau_ai_r:
      default: 20.0
    tau_ai_d:
      default: 600.0
    delta:
      default: 1.0
    r_ee:
      default: input
    r_ei:
      default: input
    ctx:
      default: input


qif_gpe_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + eta_tha)/tau_i + g_e*(1-I_ae)*I_ampa + (1-g_e)*I_nmda - g_i*(1-I_ai)*I_gabaa - (1-g_i)*I_gabab - tau_i*(PI*R_i)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ie*r_ie - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_nmda = X_nmda"
    - "d/dt * X_nmda = (k_ie*r_ie - X_nmda*(tau_nmda_r+tau_nmda_d) - I_nmda)/(tau_nmda_r*tau_nmda_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ii*R_i + k_str*str - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
    - "d/dt * I_gabab = X_gabab"
    - "d/dt * X_gabab = (k_ii*R_i - X_gabab*(tau_gabab_r+tau_gabab_d) - I_gabab)/(tau_gabab_r*tau_gabab_d)"
    - "d/dt * I_ae = X_ae"
    - "d/dt * X_ae = (a_e*I_ampa - X_ae*(tau_ae_r+tau_ae_d) - I_ae)/(tau_ae_r*tau_ae_d)"
    - "d/dt * I_ai = X_ai"
    - "d/dt * X_ai = (a_i*I_gabaa - X_ai*(tau_ai_r+tau_ai_d) - I_ai)/(tau_ai_r*tau_ai_d)"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    I_ampa:
      default: variable
    I_nmda:
      default: variable
    I_gabaa:
      default: variable
    I_gabab:
      default: variable
    I_ae:
      default: variable
    I_ai:
      default: variable
    X_ampa:
      default: variable
    X_nmda:
      default: variable
    X_gabaa:
      default: variable
    X_gabab:
      default: variable
    X_ae:
      default: variable
    X_ai:
      default: variable
    eta_i:
      default: 5.0
    eta_tha:
      default: 0.0
    k_ie:
      default: 20.0
    k_ii:
      default: 5.0
    k_str:
      default: 100.0
    g_e:
      default: 0.5
    g_i:
      default: 1.0
    a_e:
      default: 0.5
    a_i:
      default: 1.0
    tau_i:
      default: 25.4
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    tau_nmda_r:
      default: 2.0
    tau_nmda_d:
      default: 70.0
    tau_gabab_r:
      default: 4.0
    tau_gabab_d:
      default: 150.0
    tau_ae_r:
      default: 70.0
    tau_ae_d:
      default: 700.0
    tau_ai_r:
      default: 10.0
    tau_ai_d:
      default: 200.0
    delta:
      default: 2.0
    r_ie:
      default: input
    r_ii:
      default: input
    str:
      default: input


stn_syns_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_ampa - I_gabaa - tau_e*(PI*R_e)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ee*R_e + k_ctx*ctx - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ei*gpe - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_e:
      default: 0.1
    k_ee:
      default: 1.3
    k_ei:
      default: 70.3
    k_ctx:
      default: 10.0
    tau_e:
      default: 6.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.8
    tau_gabaa_d:
      default: 10.0
    delta_e:
      default: 10.6
    gpe:
      default: input
    ctx:
      default: input

gpe_proto_syns_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + I_ampa - I_gabaa - tau_i*(PI*R_i)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ie*stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ii*R_i + k_str*str + k_gpe*gpe - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_i:
      default: 11.0
    k_ie:
      default: 81.3
    k_ii:
      default: 33.7
    k_str:
      default: 298.57
    k_gpe:
      default: 20.0
    tau_i:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_i:
      default: 10.0
    stn:
      default: input
    str:
      default: 0.002
    gpe:
      default: input

stn_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_e - I_i + ctx - tau_e*(PI*R_e)^2"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    eta_e:
      default: 4.5
    tau_e:
      default: 7.7
    delta_e:
      default: 4.2
    I_e:
      default: input
    I_i:
      default: input
    ctx:
      default: input

gpe_proto_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + I_e - I_i - k_str*str - tau_i*(PI*R_i)^2"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    eta_i:
      default: 15.4
    k_str:
      default: 200.0
    tau_i:
      default: 17.3
    delta_i:
      default: 5.4
    I_e:
      default: input
    str:
      default: 0.0
    I_i:
      default: input

gpe_arky_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_a = delta_a/(PI*tau_a^2) + 2.*R_a*V_a/tau_a"
    - "d/dt * V_a = (V_a^2 + eta_a)/tau_a + I_e - I_i - tau_a*(PI*R_a)^2"
  variables:
    R_a:
      default: output
    V_a:
      default: variable
    eta_a:
      default: 9.7
    tau_a:
      default: 21.7
    delta_a:
      default: 12.4
    I_e:
      default: input
    I_i:
      default: input

str_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_s = delta_s/(PI*tau_s^2) + 2.*R_s*V_s/tau_s"
    - "d/dt * V_s = (V_s^2 + eta_s)/tau_s + I_e - I_i + ctx - tau_s*(PI*R_s)^2"
  variables:
    R_s:
      default: output
    V_s:
      default: variable
    eta_s:
      default: -7.9
    tau_s:
      default: 18.6
    delta_s:
      default: 1.0
    ctx:
      default: input
    I_e:
      default: input
    I_i:
      default: input


# population templates
######################

pop_qif:
  base: NodeTemplate
  operators:
    - qif

pop_qif_syn:
  base: NodeTemplate
  operators:
    - op_qif_syn

pop_qif_syn_adapt:
  base: NodeTemplate
  operators:
    - qif_syn_adapt

# base rate population
pop_rate:
  base: NodeTemplate
  operators:
    - op_rate

# rate population with adaptation
pop_rate_adapt:
  base: NodeTemplate
  operators:
    - op_rate_adapt

# rate population with adaptation and synaptic dynamics
pop_rate_adapt_syn:
  base: NodeTemplate
  operators:
    - op_rate_adapt_syn

STN_GPe_Pop:
  base: NodeTemplate
  operators:
    - STN_GPe_rate

stn:
  base: NodeTemplate
  operators:
    - stn_op

stn_full:
  base: NodeTemplate
  operators:
    - qif_stn_syns

gpe_full:
  base: NodeTemplate
  operators:
    - qif_gpe_syns

gpe_proto:
  base: NodeTemplate
  operators:
    - gpe_proto_op

gpe_arky:
  base: NodeTemplate
  operators:
    - gpe_arky_op

str:
  base: NodeTemplate
  operators:
    - str_op

pop_stn_gpe:
  base: NodeTemplate
  operators:
    - qif_full

stn_gpe_driven:
  base: NodeTemplate
  operators:
    - qif_driver

stn_gpe_simple:
  base: NodeTemplate
  operators:
    - qif_simple

synapse_pop:
  base: NodeTemplate
  operators:
    - biexp

qif_alpha_pop:
  base: NodeTemplate
  operators:
    - qif_single_alpha

# circuit templates
###################

qif_alpha_net:
  base: CircuitTemplate
  nodes:
    pop: qif_alpha_pop

synapse:
  base: CircuitTemplate
  nodes:
    syn: synapse_pop

stn_pop:
  base: CircuitTemplate
  nodes:
    stn: stn

gpe_pop:
  base: CircuitTemplate
  nodes:
    gpe: gpe_proto

stn_gpe_basic:
  base: CircuitTemplate
  nodes:
    stn: stn
    gpe: gpe_proto
  edges:
    - [stn/stn_op/R_e, stn/stn_op/I_e, null, {weight: 1.0, delay: 2.0, spread: 0.5}]
    - [stn/stn_op/R_e, gpe/gpe_proto_op/I_e, null, {weight: 100.0, delay: 6.0, spread: 1.5}]
    - [gpe/gpe_proto_op/R_i, stn/stn_op/I_i, null, {weight: 60.0, delay: 4.0, spread: 1.0}]
    - [gpe/gpe_proto_op/R_i, gpe/gpe_proto_op/I_i, null, {weight: 20.0, delay: 2.0, spread: 0.5}]

stn_gpe_str:
  base: CircuitTemplate
  nodes:
    stn: stn
    gpe_p: gpe_proto
    gpe_a: gpe_arky
    str: str
  edges:
    - [stn/stn_op/R_e, stn/stn_op/I_e, null, {weight: 1.6, delay: 2.0, spread: 0.5}]
    - [stn/stn_op/R_e, gpe_a/gpe_arky_op/I_e, null, {weight: 83.8, delay: 4.0, spread: 1.0}]
    - [stn/stn_op/R_e, gpe_p/gpe_proto_op/I_e, null, {weight: 36.2, delay: 4.0, spread: 1.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_p/gpe_proto_op/I_i, null, {weight: 27.9, delay: 2.0, spread: 0.5}]
    - [gpe_p/gpe_proto_op/R_i, stn/stn_op/I_i, null, {weight: 48.3, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_a/gpe_arky_op/I_i, null, {weight: 124.1, delay: 2.0, spread: 0.5}]
    - [gpe_a/gpe_arky_op/R_a, gpe_a/gpe_arky_op/I_i, null, {weight: 18.0, delay: 2.0, spread: 0.5}]
    - [gpe_a/gpe_arky_op/R_a, gpe_p/gpe_proto_op/I_i, null, {weight: 13.3, delay: 2.0, spread: 0.5}]
    - [gpe_a/gpe_arky_op/R_a, str/str_op/I_i, null, {weight: 88.5, delay: 3.0, spread: 1.0}]
    - [str/str_op/R_s, str/str_op/I_i, null, {weight: 185.7, delay: 3.0, spread: 1.0}]
    - [str/str_op/R_s, gpe_a/gpe_arky_op/I_i, null, {weight: 214.1, delay: 8.0, spread: 1.5}]
    - [str/str_op/R_s, gpe_p/gpe_proto_op/I_i, null, {weight: 112.7, delay: 8.0, spread: 1.5}]

gpe_str:
  base: CircuitTemplate
  nodes:
    gpe: gpe_arky
    str: str
  edges:
    - [gpe/gpe_arky_op/R_a, gpe/gpe_arky_op/I_i, null, {weight: 20.0, delay: 1.0, spread: 0.5}]
    - [gpe/gpe_arky_op/R_a, str/str_op/I_i, null, {weight: 60.0, delay: 2.0, spread: 0.5}]
    - [str/str_op/R_s, gpe/gpe_arky_op/I_i, null, {weight: 100.0, delay: 10.0, spread: 1.5}]
    - [str/str_op/R_s, str/str_op/I_i, null, {weight: 200.0, delay: 1.0, spread: 0.5}]


net_stn_gpe:
  base: CircuitTemplate
  nodes:
    stn_gpe: pop_stn_gpe

stn_gpe_driver:
  base: CircuitTemplate
  nodes:
    stn_gpe: stn_gpe_driven

stn_gpe_reduced:
  base: CircuitTemplate
  nodes:
    stn_gpe: stn_gpe_simple

delay_net:
  base: CircuitTemplate
  nodes:
    d: delay_pop
  edges:
    - [d/delay_test/r_out, d/delay_test/r_in, null, {weight: 1.0, delay: 0.004, spread: 0.001}]
