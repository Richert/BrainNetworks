%YAML 1.2
---

# Operator templates
####################

biexp_simple:
  base: OperatorTemplate
  equations:
    - "d/dt * I = x"
    - "d/dt * x = (alpha*r_in - x*(tau_r+tau_d) - I)/(tau_r*tau_d)"
  variables:
    I:
      default: variable
    x:
      default: variable
    tau_r:
      default: 2.0
    tau_d:
      default: 10.0
    r_in:
      default: input
    alpha:
      default: 10.0

biexp_rate:
  base: OperatorTemplate
  equations:
    - "d/dt * r = (I + r_0 - r) / tau"
    - "d/dt * r2 = (I_ext - r2) / tau2"
    - "d/dt * I = x"
    - "d/dt * x = (r_in - x*(tau_r+tau_d) - I)/(tau_r*tau_d)"
  variables:
    r:
      default: variable
    r2:
      default: output
    I:
      default: variable
    x:
      default: variable
    r_0:
      default: 0.0
    tau:
      default: 1.0
    tau2:
      default: 0.1
    tau_r:
      default: 0.5
    tau_d:
      default: 5.0
    I_ext:
      default: input
    r_in:
      default: input

rate_simple:
  base: OperatorTemplate
  equations:
    - "d/dt * r = (I + r_0 - r) / tau"
    - "d/dt * r2 = (I_ext - r2) / tau2"
  variables:
    r:
      default: output
    r2:
      default: variable
    I:
      default: input
    I_ext:
      default: input
    r_0:
      default: 0.0
    tau:
      default: 1.0
    tau2:
      default: 0.5

qif_simple:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + J_ee*R_e - J_ei*R_i - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + J_ie*R_e - J_ii*R_i - tau_i*(PI*R_i)^2"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    delta_e:
      default: 1.0
    delta_i:
      default: 1.0
    tau_e:
      default: 12.8
    tau_i:
      default: 25.4
    eta_e:
      default: 3.0
    eta_i:
      default: 10.0
    J_ee:
      default: 5.0
    J_ei:
      default: 30.0
    J_ie:
      default: 40.0
    J_ii:
      default: 20.0

qif_single_alpha:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + J_e*R_e*(1.0-I_a) - tau_e*(PI*R_e)^2"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*R_e - 2.0*X_a - I_a/tau_a)/tau_a"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    I_a:
      default: variable
    X_a:
      default: variable
    delta_e:
      default: 2.0
    tau_e:
      default: 1.0
    tau_a:
      default: 10.0
    eta_e:
      default: -5.6809865
    J_e:
      default: 21.2132
    alpha:
      default: 0.05

qif_alpha:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k*J_ee*R_e - k*J_ei*R_i*(1.0-I_a) - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k*J_ie*R_e*(1.0-I_b) - k*J_ii*R_i*(1.0-I_a) - tau_i*(PI*R_i)^2"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*beta*R_i - 2.0*X_a - I_a/tau_a)/tau_a"
    - "d/dt * I_b = X_b"
    - "d/dt * X_b = (alpha*R_e - 2.0*X_b - I_b/tau_b)/tau_b"
  variables:
    R_e:
      default: variable
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    I_a:
      default: variable
    X_a:
      default: variable
    I_b:
      default: variable
    X_b:
      default: variable
    delta_e:
      default: 2.0
    delta_i:
      default: 2.0
    tau_e:
      default: 12.0
    tau_i:
      default: 26.0
    tau_a:
      default: 100.0
    tau_b:
      default: 200.0
    eta_e:
      default: 4.0
    eta_i:
      default: -3.0
    J_ee:
      default: 0.0
    J_ei:
      default: 40.0
    J_ie:
      default: 40.0
    J_ii:
      default: 12.0
    alpha:
      default: 0.01
    beta:
      default: 2.0
    k:
      default: 1.0


qif_stn_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + g_e*(1-I_ae)*I_ampa + (1-g_e)*I_nmda - g_i*(1-I_ai)*I_gabaa - (1-g_i)*I_gabab - tau_e*(PI*R_e)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ee*R_e + k_ctx*ctx - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_nmda = X_nmda"
    - "d/dt * X_nmda = (k_ee*R_e + k_ctx*ctx - X_nmda*(tau_nmda_r+tau_nmda_d) - I_nmda)/(tau_nmda_r*tau_nmda_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ei*r_ei - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
    - "d/dt * I_gabab = X_gabab"
    - "d/dt * X_gabab = (k_ei*r_ei - X_gabab*(tau_gabab_r+tau_gabab_d) - I_gabab)/(tau_gabab_r*tau_gabab_d)"
    - "d/dt * I_ae = X_ae"
    - "d/dt * X_ae = (a_e*I_ampa - X_ae*(tau_ae_r+tau_ae_d) - I_ae)/(tau_ae_r*tau_ae_d)"
    - "d/dt * I_ai = X_ai"
    - "d/dt * X_ai = (a_i*I_gabaa - X_ai*(tau_ai_r+tau_ai_d) - I_ai)/(tau_ai_r*tau_ai_d)"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    I_ampa:
      default: variable
    I_nmda:
      default: variable
    I_gabaa:
      default: variable
    I_gabab:
      default: variable
    I_ae:
      default: variable
    I_ai:
      default: variable
    X_ampa:
      default: variable
    X_nmda:
      default: variable
    X_gabaa:
      default: variable
    X_gabab:
      default: variable
    X_ae:
      default: variable
    X_ai:
      default: variable
    eta_e:
      default: 10.0
    k_ee:
      default: 3.0
    k_ei:
      default: 20.0
    k_ctx:
      default: 100.0
    g_e:
      default: 0.8
    g_i:
      default: 1.0
    a_e:
      default: 0.2
    a_i:
      default: 0.5
    tau_e:
      default: 12.8
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.8
    tau_gabaa_d:
      default: 10.0
    tau_nmda_r:
      default: 2.0
    tau_nmda_d:
      default: 90.0
    tau_gabab_r:
      default: 4.0
    tau_gabab_d:
      default: 150.0
    tau_ae_r:
      default: 10.0
    tau_ae_d:
      default: 200.0
    tau_ai_r:
      default: 20.0
    tau_ai_d:
      default: 600.0
    delta:
      default: 1.0
    r_ee:
      default: input
    r_ei:
      default: input
    ctx:
      default: input

qif_gpe_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + eta_tha)/tau_i + g_e*(1-I_ae)*I_ampa + (1-g_e)*I_nmda - g_i*(1-I_ai)*I_gabaa - (1-g_i)*I_gabab - tau_i*(PI*R_i)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ie*r_ie - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_nmda = X_nmda"
    - "d/dt * X_nmda = (k_ie*r_ie - X_nmda*(tau_nmda_r+tau_nmda_d) - I_nmda)/(tau_nmda_r*tau_nmda_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (k_ii*R_i + k_str*str - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
    - "d/dt * I_gabab = X_gabab"
    - "d/dt * X_gabab = (k_ii*R_i - X_gabab*(tau_gabab_r+tau_gabab_d) - I_gabab)/(tau_gabab_r*tau_gabab_d)"
    - "d/dt * I_ae = X_ae"
    - "d/dt * X_ae = (a_e*I_ampa - X_ae*(tau_ae_r+tau_ae_d) - I_ae)/(tau_ae_r*tau_ae_d)"
    - "d/dt * I_ai = X_ai"
    - "d/dt * X_ai = (a_i*I_gabaa - X_ai*(tau_ai_r+tau_ai_d) - I_ai)/(tau_ai_r*tau_ai_d)"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    I_ampa:
      default: variable
    I_nmda:
      default: variable
    I_gabaa:
      default: variable
    I_gabab:
      default: variable
    I_ae:
      default: variable
    I_ai:
      default: variable
    X_ampa:
      default: variable
    X_nmda:
      default: variable
    X_gabaa:
      default: variable
    X_gabab:
      default: variable
    X_ae:
      default: variable
    X_ai:
      default: variable
    eta_i:
      default: 5.0
    eta_tha:
      default: 0.0
    k_ie:
      default: 20.0
    k_ii:
      default: 5.0
    k_str:
      default: 100.0
    g_e:
      default: 0.5
    g_i:
      default: 1.0
    a_e:
      default: 0.5
    a_i:
      default: 1.0
    tau_i:
      default: 25.4
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    tau_nmda_r:
      default: 2.0
    tau_nmda_d:
      default: 70.0
    tau_gabab_r:
      default: 4.0
    tau_gabab_d:
      default: 150.0
    tau_ae_r:
      default: 70.0
    tau_ae_d:
      default: 700.0
    tau_ai_r:
      default: 10.0
    tau_ai_d:
      default: 200.0
    delta:
      default: 2.0
    r_ie:
      default: input
    r_ii:
      default: input
    str:
      default: input

stn_syns_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_ampa - I_gabaa - tau_e*(PI*R_e)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ctx*ctx + stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_p - tau_gabaa*X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d*tau_gabaa**2)"
  variables:
    R_e:
      default: output(0.02)
    V_e:
      default: variable(-4.0)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_e:
      default: 0.1
    k_ctx:
      default: 0.0
    tau_e:
      default: 13.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.4
    tau_gabaa_d:
      default: 5.0
    delta_e:
      default: 10.6
    gpe_p:
      default: input
    ctx:
      default: input
    stn:
      default: input
    tau_gabaa:
      default: 2.0

gpe_proto_syns_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + I_ext)/tau_i + I_ampa - I_gabaa - tau_i*(PI*R_i)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn + exh - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_p + str + gpe_a + inh - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_i:
      default: output(0.06)
    V_i:
      default: variable(-2.0)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_i:
      default: 11.0
    tau_i:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_i:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    I_ext:
      default: input
    exh:
      default: input
    inh:
      default: input

gpe_arky_syns_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_a = delta_a/(PI*tau_a^2) + 2.*R_a*V_a/tau_a"
    - "d/dt * V_a = (V_a^2 + eta_a + I_ext)/tau_a + I_ampa - I_gabaa - tau_a*(PI*R_a)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn + exh - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_a + str + gpe_p + inh - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_a:
      default: output(0.03)
    V_a:
      default: variable(-2.0)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_a:
      default: 11.0
    tau_a:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_a:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    I_ext:
      default: input
    inh:
      default: input
    exh:
      default: input

stn_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + stn + ctx - gpe_p - tau_e*(PI*R_e)^2"
  variables:
    R_e:
      default: output(0.02)
    V_e:
      default: variable(-4.0)
    eta_e:
      default: 120.0
    tau_e:
      default: 12.0
    delta_e:
      default: 14.4
    stn:
      default: input
    gpe_p:
      default: input
    ctx:
      default: input

gpe_proto_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + stn - gpe_p - gpe_a - str - tau_i*(PI*R_i)^2"
  variables:
    R_i:
      default: output(0.06)
    V_i:
      default: variable(-2.0)
    eta_i:
      default: 400.0
    tau_i:
      default: 24.0
    delta_i:
      default: 150.0
    stn:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    str:
      default: input

gpe_arky_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_a = delta_a/(PI*tau_a^2) + 2.*R_a*V_a/tau_a"
    - "d/dt * V_a = (V_a^2 + eta_a)/tau_a + stn - gpe_p - gpe_a - str - tau_a*(PI*R_a)^2"
  variables:
    R_a:
      default: output(0.03)
    V_a:
      default: variable(-4.0)
    eta_a:
      default: -4000.0
    tau_a:
      default: 20.0
    delta_a:
      default: 200.0
    stn:
      default: input
    gpe_a:
      default: input
    gpe_p:
      default: input
    str:
      default: input

stn_fre_syns_op:
  base: OperatorTemplate
  equations:
    - "I_syn = eta_e+(I_ampa-I_gabaa)*tau_e"
    - "d/dt * R_e = -R_e/tau_e + (1.0 / (sqrt(2.0)*PI*tau_e**2)) * sqrt(I_syn+sqrt(I_syn**2 + delta_e**2))"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (k_ctx*ctx + stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_p - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_e:
      default: output(0.02)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_e:
      default: 0.1
    k_ctx:
      default: 0.0
    tau_e:
      default: 13.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.8
    tau_gabaa_d:
      default: 10.0
    delta_e:
      default: 10.6
    gpe_p:
      default: input
    ctx:
      default: input
    stn:
      default: input

gpe_p_fre_syns_op:
  base: OperatorTemplate
  equations:
    - "I_syn = eta_i+(I_ampa-I_gabaa)*tau_i"
    - "d/dt * R_i = -R_i/tau_i + (1.0 / (sqrt(2.0)*PI*tau_i**2)) * sqrt(I_syn+sqrt(I_syn**2 + delta_i**2))"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_p + str + gpe_a - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_i:
      default: output(0.06)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_i:
      default: 11.0
    tau_i:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_i:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input

gpe_a_fre_syns_op:
  base: OperatorTemplate
  equations:
    - "I_syn = eta_a+(I_ampa-I_gabaa)*tau_a"
    - "d/dt * R_a = -R_a/tau_a + (1.0 / (sqrt(2.0)*PI*tau_a**2)) * sqrt(I_syn+sqrt(I_syn**2 + delta_a**2))"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_a + str + gpe_p + inh - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_a:
      default: output(0.03)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_a:
      default: 11.0
    tau_a:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_a:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    inh:
      default: input

str_msn_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_s = delta_s/(PI*tau_s^2) + 2.*R_s*V_s/tau_s"
    - "d/dt * V_s = (V_s^2 + eta_s)/tau_s + I_e + ctx - I_i*(1+dd) - tau_s*(PI*R_s)^2"
  variables:
    R_s:
      default: output
    V_s:
      default: variable
    eta_s:
      default: -20.0
    tau_s:
      default: 20.0
    delta_s:
      default: 4.0
    dd:
      default: 0.0
    ctx:
      default: input
    I_e:
      default: input
    I_i:
      default: input


str_fsi_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_f = delta_f/(PI*tau_f^2) + 2.*R_f*V_f/tau_f"
    - "d/dt * V_f = (V_f^2 + eta_f)/tau_f + I_e + ctx - I_i*(1+dd) - tau_f*(PI*R_f)^2"
  variables:
    R_f:
      default: output
    V_f:
      default: variable
    eta_f:
      default: 20.0
    tau_f:
      default: 20.0
    delta_f:
      default: 8.0
    dd:
      default: 0.0
    ctx:
      default: input
    I_e:
      default: input
    I_i:
      default: input

str_dummy_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_s = (eta_s - R_s + I) / tau_s"
  variables:
    R_s:
      default: output(0.002)
    eta_s:
      default: 0.002
    tau_s:
      default: 1.0
    I:
      default: input

stn_dummy_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = (eta_e - R_e + I) / tau_e"
  variables:
    R_e:
      default: output
    eta_e:
      default: 0.02
    tau_e:
      default: 13.0
    I:
      default: input

sl_op:
  base: OperatorTemplate
  equations:
    - "S1 = alpha/(1 + exp(-beta*(Z1 - cos(PI*t_on/(t_on + t_off)))))"
    - "S2 = alpha/(1 + exp(-beta*(-Z1 - cos(PI*t_on/(t_on + t_off)))))"
    - "d/dt * Z1 = -2.0*PI*Z2/(t_on + t_off) + Z1*(1-Z1^2-Z2^2)"
    - "d/dt * Z2 = 2.0*PI*Z1/(t_on + t_off) + Z2*(1-Z1^2-Z2^2)"
  variables:
    S1:
      default: output
    S2:
      default: variable
    Z1:
      default: variable(1.0)
    Z2:
      default: variable(0.0)
    t_on:
      default: 5.0
    t_off:
      default: 78.0
    alpha:
      default: 1.0
    beta:
      default: 100.0

# population templates
######################

biexp_pop:
  base: NodeTemplate
  operators:
    - biexp_simple

biexp_rate_pop:
  base: NodeTemplate
  operators:
    - biexp_rate

rate_pop:
  base: NodeTemplate
  operators:
    - rate_simple

pop_qif:
  base: NodeTemplate
  operators:
    - qif

pop_qif_syn:
  base: NodeTemplate
  operators:
    - op_qif_syn

pop_qif_syn_adapt:
  base: NodeTemplate
  operators:
    - qif_syn_adapt

STN_GPe_Pop:
  base: NodeTemplate
  operators:
    - STN_GPe_rate

stn:
  base: NodeTemplate
  operators:
    - stn_op

stn_full:
  base: NodeTemplate
  operators:
    - qif_stn_syns

stn_syns:
  base: NodeTemplate
  operators:
    - stn_syns_op

gpe_full:
  base: NodeTemplate
  operators:
    - qif_gpe_syns

gpe_proto:
  base: NodeTemplate
  operators:
    - gpe_proto_op

stn_fre:
  base: NodeTemplate
  operators:
    - stn_fre_syns_op

gpe_p_fre:
  base: NodeTemplate
  operators:
    - gpe_p_fre_syns_op

gpe_a_fre:
  base: NodeTemplate
  operators:
    - gpe_a_fre_syns_op

gpe_proto_syns:
  base: NodeTemplate
  operators:
    - gpe_proto_syns_op

gpe_arky:
  base: NodeTemplate
  operators:
    - gpe_arky_op

gpe_arky_syns:
  base: NodeTemplate
  operators:
    - gpe_arky_syns_op

str_msn:
  base: NodeTemplate
  operators:
    - str_msn_op

str_fsi:
  base: NodeTemplate
  operators:
    - str_fsi_op

synapse_pop:
  base: NodeTemplate
  operators:
    - biexp

qif_alpha_pop:
  base: NodeTemplate
  operators:
    - qif_single_alpha

str_dummy:
  base: NodeTemplate
  operators:
    - str_dummy_op

stn_dummy:
  base: NodeTemplate
  operators:
    - stn_dummy_op

sl_driver:
  base: NodeTemplate
  operators:
    - sl_op

# circuit templates
###################

qif_alpha_net:
  base: CircuitTemplate
  nodes:
    pop: qif_alpha_pop

biexp:
  base: CircuitTemplate
  nodes:
    n: biexp_pop
  edges:

biexp_gamma:
  base: CircuitTemplate
  nodes:
    n1: biexp_rate_pop
  edges:
    - [n1/biexp_rate/r2, n1/biexp_rate/r_in, null, {weight: 1.0, delay: 1.0}]

rate:
  base: CircuitTemplate
  nodes:
    n1: rate_pop
  edges:
    - [n1/rate_simple/r2, n1/rate_simple/I, null, {weight: 1.0, delay: 1.0, spread: 0.5}]

synapse:
  base: CircuitTemplate
  nodes:
    syn: synapse_pop

stn_pop:
  base: CircuitTemplate
  nodes:
    stn: stn
  edges:
    - [stn/stn_op/R_e, stn/stn_op/stn, null, {weight: 22.0, delay: 4.0, spread: 2.8}]

stn_syns_pop:
  base: CircuitTemplate
  nodes:
    stn: stn_syns
  edges:
    - [stn/stn_syns_op/R_e, stn/stn_syns_op/stn, null, {weight: 1.0, delay: 1.75, spread: 1.25}]

gpe_pop:
  base: CircuitTemplate
  nodes:
    gpe: gpe_proto

gpe_2pop:
  base: CircuitTemplate
  nodes:
    gpe_p: gpe_proto_syns
    gpe_a: gpe_arky_syns
    stn: stn_dummy
    str: str_dummy
  edges:
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_p/gpe_proto_syns_op/gpe_p, null, {weight: 0.0, delay: 1.0, spread: 0.6}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_a/gpe_arky_syns_op/gpe_p, null, {weight: 0.0, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_p/gpe_proto_syns_op/gpe_a, null, {weight: 0.0, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_a/gpe_arky_syns_op/gpe_a, null, {weight: 0.0, delay: 1.0, spread: 0.6}]
    - [stn/stn_dummy_op/R_e, gpe_p/gpe_proto_syns_op/stn, null, {weight: 0.0}]
    - [stn/stn_dummy_op/R_e, gpe_a/gpe_arky_syns_op/stn, null, {weight: 0.0}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_syns_op/str, null, {weight: 0.0}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_syns_op/str, null, {weight: 0.0}]

gpe_2pop_driver:
  base: CircuitTemplate
  nodes:
    gpe_p: gpe_proto_syns
    gpe_a: gpe_arky_syns
    stn: stn_dummy
    str: str_dummy
    driver: sl_driver
  edges:
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_p/gpe_proto_syns_op/gpe_p, null, {weight: 1.0, delay: 1.0, spread: 0.6}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_a/gpe_arky_syns_op/gpe_p, null, {weight: 1.0, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_p/gpe_proto_syns_op/gpe_a, null, {weight: 1.0, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_a/gpe_arky_syns_op/gpe_a, null, {weight: 1.0, delay: 1.0, spread: 0.6}]
    - [stn/stn_dummy_op/R_e, gpe_p/gpe_proto_syns_op/stn, null, {weight: 1.0}]
    - [stn/stn_dummy_op/R_e, gpe_a/gpe_arky_syns_op/stn, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_syns_op/str, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_syns_op/str, null, {weight: 1.0}]
    - [driver/sl_op/S1, gpe_p/gpe_proto_syns_op/exh, null, {weight: 0.0}]
    - [driver/sl_op/S2, gpe_p/gpe_proto_syns_op/inh, null, {weight: 0.0}]
    - [ driver/sl_op/S1, gpe_a/gpe_arky_syns_op/exh, null, { weight: 0.0 } ]
    - [ driver/sl_op/S2, gpe_a/gpe_arky_syns_op/inh, null, { weight: 0.0 } ]

gpe_syns_pop:
  base: CircuitTemplate
  nodes:
    gpe: gpe_proto_syns
  edges:
    - [gpe/gpe_proto_syns_op/R_i, gpe/gpe_proto_syns_op/gpe_p, null, {weight: 1.0, delay: 1.5, spread: 1.0}]

stn_gpe:
  base: CircuitTemplate
  nodes:
    stn: stn
    gpe_p: gpe_proto
    gpe_a: gpe_arky
    str: str_dummy
  edges:
    - [stn/stn_op/R_e, stn/stn_op/stn, null, {weight: 22.0, delay: 4.0, spread: 2.8}]
    - [stn/stn_op/R_e, gpe_p/gpe_proto_op/stn, null, {weight: 1200.0, delay: 6.0, spread: 3.0}]
    - [stn/stn_op/R_e, gpe_a/gpe_arky_op/stn, null, {weight: 565.7, delay: 6.0, spread: 3.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_p/gpe_proto_op/gpe_p, null, {weight: 607.2, delay: 4.0, spread: 2.8}]
    - [gpe_p/gpe_proto_op/R_i, stn/stn_op/gpe_p, null, {weight: 303.6, delay: 8.0, spread: 5.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_a/gpe_arky_op/gpe_p, null, {weight: 565.7, delay: 4.0, spread: 2.8}]
    - [gpe_a/gpe_arky_op/R_a, gpe_a/gpe_arky_op/gpe_a, null, {weight: 282.8, delay: 4.0, spread: 2.8}]
    - [gpe_a/gpe_arky_op/R_a, gpe_p/gpe_proto_op/gpe_a, null, {weight: 303.6, delay: 4.0, spread: 2.8}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_op/str, null, {weight: 2262.7}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_op/str, null, {weight: 1517.9}]

stn_gpe_syns:
  base: CircuitTemplate
  nodes:
    stn: stn_syns
    gpe_p: gpe_proto_syns
    gpe_a: gpe_arky_syns
    str: str_dummy
  edges:
    - [stn/stn_syns_op/R_e, stn/stn_syns_op/stn, null, {weight: 22.0, delay: 1.0, spread: 0.6}]
    - [stn/stn_syns_op/R_e, gpe_p/gpe_proto_syns_op/stn, null, {weight: 1200.0, delay: 3.0, spread: 1.0}]
    - [stn/stn_syns_op/R_e, gpe_a/gpe_arky_syns_op/stn, null, {weight: 565.7, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_p/gpe_proto_syns_op/gpe_p, null, {weight: 607.2, delay: 1.0, spread: 0.6}]
    - [gpe_p/gpe_proto_syns_op/R_i, stn/stn_syns_op/gpe_p, null, {weight: 303.6, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_a/gpe_arky_syns_op/gpe_p, null, {weight: 565.7, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_a/gpe_arky_syns_op/gpe_a, null, {weight: 282.8, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_p/gpe_proto_syns_op/gpe_a, null, {weight: 303.6, delay: 1.0, spread: 0.6}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_syns_op/str, null, {weight: 2262.7}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_syns_op/str, null, {weight: 1517.9}]

stn_gpe_2pop:
  base: CircuitTemplate
  nodes:
    stn: stn_syns
    gpe_p: gpe_proto_syns
  edges:
    - [stn/stn_syns_op/R_e, stn/stn_syns_op/stn, null, {weight: 22.0, delay: 1.0, spread: 0.6}]
    - [stn/stn_syns_op/R_e, gpe_p/gpe_proto_syns_op/stn, null, {weight: 1200.0, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_p/gpe_proto_syns_op/gpe_p, null, {weight: 607.2, delay: 1.0, spread: 0.6}]
    - [gpe_p/gpe_proto_syns_op/R_i, stn/stn_syns_op/gpe_p, null, {weight: 303.6, delay: 3.0, spread: 1.0}]

stn_gpe_fre:
  base: CircuitTemplate
  nodes:
    stn: stn_fre
    gpe_p: gpe_p_fre
    gpe_a: gpe_a_fre
    str: str_dummy
  edges:
    - [stn/stn_fre_syns_op/R_e, stn/stn_fre_syns_op/stn, null, {weight: 22.0, delay: 1.0, spread: 0.6}]
    - [stn/stn_fre_syns_op/R_e, gpe_p/gpe_p_fre_syns_op/stn, null, {weight: 1200.0, delay: 3.0, spread: 1.0}]
    - [stn/stn_fre_syns_op/R_e, gpe_a/gpe_a_fre_syns_op/stn, null, {weight: 565.7, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_p_fre_syns_op/R_i, gpe_p/gpe_p_fre_syns_op/gpe_p, null, {weight: 607.2, delay: 1.0, spread: 0.6}]
    - [gpe_p/gpe_p_fre_syns_op/R_i, stn/stn_fre_syns_op/gpe_p, null, {weight: 303.6, delay: 3.0, spread: 1.0}]
    - [gpe_p/gpe_p_fre_syns_op/R_i, gpe_a/gpe_a_fre_syns_op/gpe_p, null, {weight: 565.7, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_a_fre_syns_op/R_a, gpe_a/gpe_a_fre_syns_op/gpe_a, null, {weight: 282.8, delay: 1.0, spread: 0.6}]
    - [gpe_a/gpe_a_fre_syns_op/R_a, gpe_p/gpe_p_fre_syns_op/gpe_a, null, {weight: 303.6, delay: 1.0, spread: 0.6}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_a_fre_syns_op/str, null, {weight: 2262.7}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_p_fre_syns_op/str, null, {weight: 1517.9}]

stn_gpe_nosyns:
  base: CircuitTemplate
  nodes:
    stn: stn
    gpe_p: gpe_proto
    gpe_a: gpe_arky
    str: str_dummy
  edges:
    - [stn/stn_op/R_e, stn/stn_op/stn, null, {weight: 22.0}]
    - [stn/stn_op/R_e, gpe_p/gpe_proto_op/stn, null, {weight: 195.0}]
    - [stn/stn_op/R_e, gpe_a/gpe_arky_op/stn, null, {weight: 325.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_p/gpe_proto_op/gpe_p, null, {weight: 64.0}]
    - [gpe_p/gpe_proto_op/R_i, stn/stn_op/gpe_p, null, {weight: 484.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_a/gpe_arky_op/gpe_p, null, {weight: 45.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_a/gpe_arky_op/gpe_a, null, {weight: 23.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_p/gpe_proto_op/gpe_a, null, {weight: 38.0}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_op/str, null, {weight: 1000.0}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_op/str, null, {weight: 1000.0}]

stn_gpe_noax:
  base: CircuitTemplate
  nodes:
    stn: stn_syns
    gpe_p: gpe_proto_syns
    gpe_a: gpe_arky_syns
    str: str_dummy
  edges:
    - [stn/stn_syns_op/R_e, stn/stn_syns_op/stn, null, {weight: 22.0}]
    - [stn/stn_syns_op/R_e, gpe_p/gpe_proto_syns_op/stn, null, {weight: 1200.0}]
    - [stn/stn_syns_op/R_e, gpe_a/gpe_arky_syns_op/stn, null, {weight: 565.7}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_p/gpe_proto_syns_op/gpe_p, null, {weight: 607.2}]
    - [gpe_p/gpe_proto_syns_op/R_i, stn/stn_syns_op/gpe_p, null, {weight: 303.6,}]
    - [gpe_p/gpe_proto_syns_op/R_i, gpe_a/gpe_arky_syns_op/gpe_p, null, {weight: 565.7}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_a/gpe_arky_syns_op/gpe_a, null, {weight: 282.8}]
    - [gpe_a/gpe_arky_syns_op/R_a, gpe_p/gpe_proto_syns_op/gpe_a, null, {weight: 303.6}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_syns_op/str, null, {weight: 2262.7}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_syns_op/str, null, {weight: 1517.9}]



gpe_str:
  base: CircuitTemplate
  nodes:
    gpe: gpe_arky
    msn: str_msn
    fsi: str_fsi
  edges:
    - [gpe/gpe_arky_op/R_a, gpe/gpe_arky_op/I_i, null, {weight: 20.0, delay: 2.0, spread: 0.5}]
    - [gpe/gpe_arky_op/R_a, fsi/str_fsi_op/I_i, null, {weight: 40.0, delay: 3.0, spread: 1.0}]
    - [msn/str_msn_op/R_s, gpe/gpe_arky_op/I_i, null, {weight: 120.0, delay: 10.0, spread: 1.5}]
    - [msn/str_msn_op/R_s, msn/str_msn_op/I_i, null, {weight: 60.0, delay: 2.0, spread: 0.5}]
    - [fsi/str_fsi_op/R_f, msn/str_msn_op/I_i, null, {weight: 80.0, delay: 2.0, spread: 0.5}]
    - [fsi/str_fsi_op/R_f, fsi/str_fsi_op/I_i, null, {weight: 40.0, delay: 2.0, spread: 0.5}]
