%YAML 1.2
---

# Operator templates
####################

# 2 coupled qif populations (1 x excitatory, 1 x inhibitory)
qif:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k_ee*R_e - k_ei*R_i - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k_ie*R_e - k_ii*R_i - tau_i*(PI*R_i)^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    eta_e:
      default: -2.0
    eta_i:
      default: 10.0
    k_ee:
      default: 0.0
    k_ei:
      default: 10.0
    k_ie:
      default: 12.0
    k_ii:
      default: 8.0
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    delta:
      default: 2.0

qif_syn:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k_ee*I_e - k_ei*I_i - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k_ie*I_e - k_ii*I_i - tau_i*(PI*r_i)^2"
    - "d/dt * I_e = (R_e - I_e)/tau_ampa"
    - "d/dt * I_i = (R_i - I_i)/tau_gabaa"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k_ee:
      default: 0.4
    k_ei:
      default: 4.0
    k_ie:
      default: 3.0
    k_ii:
      default: 2.0
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_ampa:
      default: 0.002
    tau_gabaa:
      default: 0.004
    delta:
      default: 2.0

qif_syn_adapt:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k_ee*I_e - k_ei*I_i - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k_ie*I_e - k_ii*I_i - I_a - tau_i*(PI*R_i)^2"
    - "d/dt * I_e = (R_e - I_e)/tau_ampa"
    - "d/dt * I_i = (R_i - I_i)/tau_gabaa"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = alpha*R_i/tau_a - 2.0*X_a/tau_a - I_a/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    I_a:
      default: variable
    X_a:
      default: variable
    eta_e:
      default: -4.39
    eta_i:
      default: 0.31
    k_ee:
      default: 14.18
    k_ei:
      default: 11.36
    k_ie:
      default: 47.71
    k_ii:
      default: 7.61
    alpha:
      default: 2.99
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_ampa:
      default: 0.002
    tau_gabaa:
      default: 0.004
    tau_a:
      default: 0.2
    delta:
      default: 2.0

qif_stn:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_e - I_i - tau_e*(PI*R_e)^2"
    - "d/dt * I_e = ((tau_de*tau_re)**(tau_re/(tau_de-tau_re))*X_e - I_e)/tau_re"
    - "d/dt * X_e =  k_ee*beta*STN - X_e/tau_de"
    - "d/dt * I_i = ((tau_di*tau_ri)**(tau_ri/(tau_di-tau_ri))*X_i - I_i)/tau_ri"
    - "d/dt * X_i = k_ei*beta*GPe - X_i/tau_di"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    X_e:
      default: variable
    X_i:
      default: variable
    eta_e:
      default: -3.9
    k_ee:
      default: 3.7
    k_ei:
      default: 20.8
    beta:
      default: 100.0
    tau_e:
      default: 0.006
    tau_re:
      default: 0.001
    tau_de:
      default: 0.005
    tau_ri:
      default: 0.002
    tau_di:
      default: 0.02
    delta:
      default: 2.0
    GPe:
      default: input
    STN:
      default: input

qif_gpe:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + I_e - I_i - I_a - tau_i*(PI*R_i)^2"
    - "d/dt * I_e = ((tau_de*tau_re)**(tau_re/(tau_de-tau_re))*X_e - I_e)/tau_re"
    - "d/dt * X_e = k_ie*beta*STN - X_e/tau_de"
    - "d/dt * I_i = ((tau_di*tau_ri)**(tau_ri/(tau_di-tau_ri))*X_i - I_i)/tau_ri"
    - "d/dt * X_i = k_ii*beta*GPe - X_i/tau_di"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = alpha*R_i/tau_a - 2.0*X_a/tau_a - I_a/tau_a^2"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    I_a:
      default: variable
    X_e:
      default: variable
    X_i:
      default: variable
    X_a:
      default: variable
    eta_i:
      default: 6.5
    k_ie:
      default: 143.7
    k_ii:
      default: 0.0
    alpha:
      default: 6.9
    beta:
      default: 100.0
    tau_i:
      default: 0.014
    tau_re:
      default: 0.001
    tau_de:
      default: 0.005
    tau_ri:
      default: 0.002
    tau_di:
      default: 0.02
    tau_a:
      default: 0.2
    delta:
      default: 2.0
    STN:
      default: input
    GPe:
      default: input

# 2 coupled qif populations (1 x excitatory, 1 x inhibitory) with short-term adaptation of inhibitory synapses
qif_adapt:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + k*r_io_e*R_e - k*R_i*(1.0-A_i) - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i)/tau_i + k*r_ei*R_e - k*r_io*R_i*(1.0-adapt_i) - tau_i*(PI*r_i)^2"
    - "d/dt * A_i = Z_i"
    - "d/dt * Z_i = alpha*R_i/tau_a - 2.*Z_i/tau_a - A_i/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    A_i:
      default: variable
    Z_i:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k:
      default: 4.0
    r_ei:
      default: 0.7
    r_io:
      default: 1.5
    r_io_e:
      default: 0.0
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_a:
      default: 0.5
    alpha:
      default: 0.0
    delta:
      default: 2.0

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory)
op_rate:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - k*R_i - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + k*r_ei*R_e - k*r_io*R_i - V_i)/tau_i"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    eta_e:
      default: 10.0
    eta_i:
      default: 0.0
    k:
      default: 0.17
    r_ei:
      default: 0.5
    r_io:
      default: 0.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory) with short-term adaptation on inhibitory synapses
op_rate_adapt:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - k*R_i*(1.0-A_i) - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + k*r_ei*R_e - k*r_io*R_i*(1.0-A_i) - V_i)/tau_i"
    - "d/dt * A_i = Z_i"
    - "d/dt * Z_i = alpha*R_i/tau_a - 2.*Z_i/tau_a - A_i/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    A_i:
      default: variable
    Z_i:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k:
      default: 4.0
    r_ei:
      default: 0.7
    r_io:
      default: 1.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_a:
      default: 0.5
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0
    alpha:
      default: 0.0

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory) with short-term adaptation on inhibitory synapses and
# modeling of synaptic dynamics
op_rate_adapt_syn:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - I_ei*(1.0-A_ei) - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + I_ie - I_ii*(1.0-A_ii) - V_i)/tau_i"
    - "d/dt * I_ei = X_ei"
    - "d/dt * X_ei = k*R_i/tau_ei - 2.*X_ei/tau_ei - I_ei/tau_ei^2"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = k*r_ei*R_e/tau_ie - 2.*X_ie/tau_ie - I_ie/tau_ie^2"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = k*r_io*R_i/tau_ii - 2.*X_ii/tau_ii - I_ii/tau_ii^2"
    - "d/dt * A_ei = Z_ei"
    - "d/dt * Z_ei = alpha*I_ie/tau_a - 2.*Z_ei/tau_a - A_ei/tau_a^2"
    - "d/dt * A_ii = Z_ii"
    - "d/dt * Z_ii = alpha*I_ii/tau_a - 2.*Z_ii/tau_a - A_ii/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    I_ei:
      default: variable
    X_ei:
      default: variable
    I_ie:
      default: variable
    X_ie:
      default: variable
    I_ii:
      default: variable
    X_ii:
      default: variable
    A_ei:
      default: variable
    Z_ei:
      default: variable
    A_ii:
      default: variable
    Z_ii:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k:
      default: 4.0
    r_ei:
      default: 0.7
    r_io:
      default: 1.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_ei:
      default: 0.006
    tau_ie:
      default: 0.006
    tau_ii:
      default: 0.004
    tau_a:
      default: 0.5
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0
    alpha:
      default: 0.0

# population templates
######################

pop_qif:
  base: NodeTemplate
  operators:
    - qif

pop_qif_syn:
  base: NodeTemplate
  operators:
    - op_qif_syn

pop_qif_syn_adapt:
  base: NodeTemplate
  operators:
    - qif_syn_adapt

# base rate population
pop_rate:
  base: NodeTemplate
  operators:
    - op_rate

# rate population with adaptation
pop_rate_adapt:
  base: NodeTemplate
  operators:
    - op_rate_adapt

# rate population with adaptation and synaptic dynamics
pop_rate_adapt_syn:
  base: NodeTemplate
  operators:
    - op_rate_adapt_syn

STN_GPe_Pop:
  base: NodeTemplate
  operators:
    - STN_GPe_rate

STN:
  base: NodeTemplate
  operators:
    - qif_stn

GPe:
  base: NodeTemplate
  operators:
    - qif_gpe

# circuit templates
###################

net_qif:
  base: CircuitTemplate
  nodes:
    eic: pop_qif

net_qif_syn:
  base: CircuitTemplate
  nodes:
    pop_qif_syn: pop_qif_syn

net_qif_syn_adapt:
  base: CircuitTemplate
  nodes:
    stn: STN
    gpe: GPe
  edges:
    - [stn/qif_stn/R_e, gpe/qif_gpe/STN, Null, {weight: 1.0, delay: 0.004}]
    - [gpe/qif_gpe/R_i, stn/qif_stn/GPe, Null, {weight: 1.0, delay: 0.004}]
    - [stn/qif_stn/R_e, stn/qif_stn/STN, Null, {weight: 1.0, delay: 0.0}]
    - [gpe/qif_gpe/R_i, gpe/qif_gpe/GPe, Null, {weight: 1.0, delay: 0.0}]

net_rate:
  base: CircuitTemplate
  nodes:
    pop_rate: pop_rate

net_rate_adapt:
  base: CircuitTemplate
  nodes:
    pop_rate_adapt: pop_rate_adapt

net_rate_adapt_syn:
  base: CircuitTemplate
  nodes:
    pop_rate_adapt_syn: pop_rate_adapt_syn
