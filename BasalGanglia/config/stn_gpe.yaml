%YAML 1.2
---

# Operator templates
####################

delay_test:
  base: OperatorTemplate
  equations:
    - "r_out = r_in + sin(2.0*PI*5.0*t)"
  variables:
    r_out:
      default: output
    r_in:
      default: input
    u:
      default: input
    t:
      default: variable

qif_full:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta_e/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_ee - I_ei - tau_e*(PI*R_e)^2"
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + eta_str + eta_tha)/tau_i + I_ie - I_ii - I_a - tau_i*(PI*R_i)^2"
    - "d/dt * I_ee = X_ee"
    - "d/dt * X_ee = (k_ee*R_e - X_ee*(tau_ee_r+tau_ee_d) - I_ee)/(tau_ee_r*tau_ee_d)"
    - "d/dt * I_ei = X_ei"
    - "d/dt * X_ei = (k_ei*R_i16 - X_ei*(tau_ei_r+tau_ei_d) - I_ei)/(tau_ei_r*tau_ei_d)"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = (k_ie*R_e16 - X_ie*(tau_ie_r+tau_ie_d) - I_ie)/(tau_ie_r*tau_ie_d)"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = (k_ii*R_i - X_ii*(tau_ii_r+tau_ii_d) - I_ii)/(tau_ii_r*tau_ii_d)"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*R_i - 2.0*X_a - I_a/tau_a)/tau_a"
    - "d/dt * R_e1 = (R_e - R_e1)*16.0/d_e"
    - "d/dt * R_e2 = (R_e1 - R_e2)*16.0/d_e"
    - "d/dt * R_e3 = (R_e2 - R_e3)*16.0/d_e"
    - "d/dt * R_e4 = (R_e3 - R_e4)*16.0/d_e"
    - "d/dt * R_e5 = (R_e4 - R_e5)*16.0/d_e"
    - "d/dt * R_e6 = (R_e5 - R_e6)*16.0/d_e"
    - "d/dt * R_e7 = (R_e6 - R_e7)*16.0/d_e"
    - "d/dt * R_e8 = (R_e7 - R_e8)*16.0/d_e"
    - "d/dt * R_e9 = (R_e8 - R_e9)*16.0/d_e"
    - "d/dt * R_e10 = (R_e9 - R_e10)*16.0/d_e"
    - "d/dt * R_e11 = (R_e10 - R_e11)*16.0/d_e"
    - "d/dt * R_e12 = (R_e11 - R_e12)*16.0/d_e"
    - "d/dt * R_e13 = (R_e12 - R_e13)*16.0/d_e"
    - "d/dt * R_e14 = (R_e13 - R_e14)*16.0/d_e"
    - "d/dt * R_e15 = (R_e14 - R_e15)*16.0/d_e"
    - "d/dt * R_e16 = (R_e15 - R_e16)*16.0/d_e"
    - "d/dt * R_i1 = (R_i - R_i1)*16.0/d_i"
    - "d/dt * R_i2 = (R_i1 - R_i2)*16.0/d_i"
    - "d/dt * R_i3 = (R_i2 - R_i3)*16.0/d_i"
    - "d/dt * R_i4 = (R_i3 - R_i4)*16.0/d_i"
    - "d/dt * R_i5 = (R_i4 - R_i5)*16.0/d_i"
    - "d/dt * R_i6 = (R_i5 - R_i6)*16.0/d_i"
    - "d/dt * R_i7 = (R_i6 - R_i7)*16.0/d_i"
    - "d/dt * R_i8 = (R_i7 - R_i8)*16.0/d_i"
    - "d/dt * R_i9 = (R_i8 - R_i9)*16.0/d_i"
    - "d/dt * R_i10 = (R_i9 - R_i10)*16.0/d_i"
    - "d/dt * R_i11 = (R_i10 - R_i11)*16.0/d_i"
    - "d/dt * R_i12 = (R_i11 - R_i12)*16.0/d_i"
    - "d/dt * R_i13 = (R_i12 - R_i13)*16.0/d_i"
    - "d/dt * R_i14 = (R_i13 - R_i14)*16.0/d_i"
    - "d/dt * R_i15 = (R_i14 - R_i15)*16.0/d_i"
    - "d/dt * R_i16 = (R_i15 - R_i16)*16.0/d_i"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    R_i:
      default: variable
    V_i:
      default: variable
    I_ee:
      default: variable
    I_ei:
      default: variable
    I_ie:
      default: variable
    I_ii:
      default: variable
    I_a:
      default: variable
    X_ee:
      default: variable
    X_ei:
      default: variable
    X_ie:
      default: variable
    X_ii:
      default: variable
    X_a:
      default: variable
    eta_e:
      default: -0.9
    eta_i:
      default: 0.9
    eta_str:
      default: -1.1
    eta_tha:
      default: 7.9
    k_ee:
      default: 4.6
    k_ei:
      default: 62.6
    k_ie:
      default: 86.6
    k_ii:
      default: 8.4
    tau_e:
      default: 6.0
    tau_i:
      default: 14.0
    tau_ee_r:
      default: 0.8
    tau_ee_d:
      default: 3.7
    tau_ei_r:
      default: 0.8
    tau_ei_d:
      default: 10.0
    tau_ie_r:
      default: 0.8
    tau_ie_d:
      default: 3.7
    tau_ii_r:
      default: 0.5
    tau_ii_d:
      default: 5.0
    tau_a:
      default: 200.0
    alpha:
      default: 1.2
    delta_e:
      default: 1.0
    delta_i:
      default: 1.2
    d_e:
      default: 4.0
    d_i:
      default: 4.0
    R_e1:
      default: variable
    R_e2:
      default: variable
    R_e3:
      default: variable
    R_e4:
      default: variable
    R_e5:
      default: variable
    R_e6:
      default: variable
    R_e7:
      default: variable
    R_e8:
      default: variable
    R_e9:
      default: variable
    R_e10:
      default: variable
    R_e11:
      default: variable
    R_e12:
      default: variable
    R_e13:
      default: variable
    R_e14:
      default: variable
    R_e15:
      default: variable
    R_e16:
      default: variable
    R_i1:
      default: variable
    R_i2:
      default: variable
    R_i3:
      default: variable
    R_i4:
      default: variable
    R_i5:
      default: variable
    R_i6:
      default: variable
    R_i7:
      default: variable
    R_i8:
      default: variable
    R_i9:
      default: variable
    R_i10:
      default: variable
    R_i11:
      default: variable
    R_i12:
      default: variable
    R_i13:
      default: variable
    R_i14:
      default: variable
    R_i15:
      default: variable
    R_i16:
      default: variable


qif_stn:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = delta/(PI*tau_e^2) + 2.*R_e*V_e/tau_e"
    - "d/dt * V_e = (V_e^2 + eta_e)/tau_e + I_e - I_i - tau_e*(PI*R_e)^2"
    - "d/dt * I_ee = X_ee"
    - "d/dt * X_ee = (k_ee*R_ee - X_ee*(tau_re+tau_de) - I_ee)/(tau_re*tau_de)"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = (k_ei*GPe - X_ie*(tau_ri+tau_di) - I_ie)/(tau_ri*tau_di)"
  variables:
    R_e:
      default: output
    V_e:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    X_e:
      default: variable
    X_i:
      default: variable
    eta_e:
      default: -5.0
    k_ee:
      default: 1.0
    k_ei:
      default: 10.0
    tau_e:
      default: 0.006
    tau_re:
      default: 0.0008
    tau_de:
      default: 0.0037
    tau_ri:
      default: 0.0008
    tau_di:
      default: 0.01
    delta:
      default: 2.0
    GPe:
      default: input


qif_gpe:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + eta_str + eta_tha)/tau_i + I_e - I_i - I_a - tau_i*(PI*R_i)^2"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = (k_ie*STN - X_ie*(tau_re+tau_de) - I_ie)/(tau_re*tau_de)"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = (k_ii*R_i - X_ii*(tau_ri+tau_di) - I_ii)/(tau_ri*tau_di)"
    - "d/dt * I_a = X_a"
    - "d/dt * X_a = (alpha*R_i - 2.0*X_a - I_a/tau_a)/tau_a"
  variables:
    R_i:
      default: output
    V_i:
      default: variable
    I_ie:
      default: variable
    I_ii:
      default: variable
    I_a:
      default: variable
    X_ie:
      default: variable
    X_ii:
      default: variable
    X_a:
      default: variable
    eta_i:
      default: 5.0
    eta_str:
      default: -2.0
    eta_tha:
      default: 2.0
    k_ie:
      default: 10.0
    k_ii:
      default: 1.0
    alpha:
      default: 0.0
    tau_i:
      default: 0.014
    tau_re:
      default: 0.0008
    tau_de:
      default: 0.0037
    tau_ri:
      default: 0.0005
    tau_di:
      default: 0.005
    tau_a:
      default: 0.2
    delta:
      default: 2.0
    STN:
      default: input

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory)
op_rate:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - k*R_i - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + k*r_ei*R_e - k*r_io*R_i - V_i)/tau_i"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    eta_e:
      default: 10.0
    eta_i:
      default: 0.0
    k:
      default: 0.17
    r_ei:
      default: 0.5
    r_io:
      default: 0.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory) with short-term adaptation on inhibitory synapses
op_rate_adapt:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - k*R_i*(1.0-A_i) - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + k*r_ei*R_e - k*r_io*R_i*(1.0-A_i) - V_i)/tau_i"
    - "d/dt * A_i = Z_i"
    - "d/dt * Z_i = alpha*R_i/tau_a - 2.*Z_i/tau_a - A_i/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    A_i:
      default: variable
    Z_i:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k:
      default: 4.0
    r_ei:
      default: 0.7
    r_io:
      default: 1.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_a:
      default: 0.5
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0
    alpha:
      default: 0.0

# 2 coupled rate populations (1 x excitatory, 1 x inhibitory) with short-term adaptation on inhibitory synapses and
# modeling of synaptic dynamics
op_rate_adapt_syn:
  base: OperatorTemplate
  equations:
    - "R_e = max_e/(1.0 + exp(s_e*V_e))"
    - "R_i = max_i/(1.0 + exp(s_i*V_i))"
    - "d/dt * V_e = (eta_e - I_ei*(1.0-A_ei) - V_e)/tau_e"
    - "d/dt * V_i = (eta_i + I_ie - I_ii*(1.0-A_ii) - V_i)/tau_i"
    - "d/dt * I_ei = X_ei"
    - "d/dt * X_ei = k*R_i/tau_ei - 2.*X_ei/tau_ei - I_ei/tau_ei^2"
    - "d/dt * I_ie = X_ie"
    - "d/dt * X_ie = k*r_ei*R_e/tau_ie - 2.*X_ie/tau_ie - I_ie/tau_ie^2"
    - "d/dt * I_ii = X_ii"
    - "d/dt * X_ii = k*r_io*R_i/tau_ii - 2.*X_ii/tau_ii - I_ii/tau_ii^2"
    - "d/dt * A_ei = Z_ei"
    - "d/dt * Z_ei = alpha*I_ie/tau_a - 2.*Z_ei/tau_a - A_ei/tau_a^2"
    - "d/dt * A_ii = Z_ii"
    - "d/dt * Z_ii = alpha*I_ii/tau_a - 2.*Z_ii/tau_a - A_ii/tau_a^2"
  variables:
    R_e:
      default: output
    R_i:
      default: variable
    V_e:
      default: variable
    V_i:
      default: variable
    I_ei:
      default: variable
    X_ei:
      default: variable
    I_ie:
      default: variable
    X_ie:
      default: variable
    I_ii:
      default: variable
    X_ii:
      default: variable
    A_ei:
      default: variable
    Z_ei:
      default: variable
    A_ii:
      default: variable
    Z_ii:
      default: variable
    eta_e:
      default: 1.2
    eta_i:
      default: -2.0
    k:
      default: 4.0
    r_ei:
      default: 0.7
    r_io:
      default: 1.5
    tau_e:
      default: 0.006
    tau_i:
      default: 0.014
    tau_ei:
      default: 0.006
    tau_ie:
      default: 0.006
    tau_ii:
      default: 0.004
    tau_a:
      default: 0.5
    s_e:
      default: -7.0
    s_i:
      default: -0.5
    max_e:
      default: 300.0
    max_i:
      default: 400.0
    alpha:
      default: 0.0

# population templates
######################

pop_qif:
  base: NodeTemplate
  operators:
    - qif

pop_qif_syn:
  base: NodeTemplate
  operators:
    - op_qif_syn

pop_qif_syn_adapt:
  base: NodeTemplate
  operators:
    - qif_syn_adapt

# base rate population
pop_rate:
  base: NodeTemplate
  operators:
    - op_rate

# rate population with adaptation
pop_rate_adapt:
  base: NodeTemplate
  operators:
    - op_rate_adapt

# rate population with adaptation and synaptic dynamics
pop_rate_adapt_syn:
  base: NodeTemplate
  operators:
    - op_rate_adapt_syn

STN_GPe_Pop:
  base: NodeTemplate
  operators:
    - STN_GPe_rate

STN:
  base: NodeTemplate
  operators:
    - qif_stn

GPe:
  base: NodeTemplate
  operators:
    - qif_gpe

pop_stn_gpe:
  base: NodeTemplate
  operators:
    - qif_full

delay_pop:
  base: NodeTemplate
  operators:
    - delay_test

# circuit templates
###################

net_qif_syn_adapt:
  base: CircuitTemplate
  nodes:
    stn: STN
    gpe: GPe
  edges:
    - [stn/qif_stn/R_e, gpe/qif_gpe/STN, null, {weight: 1.0, delay: 0.004, spread: 0.001}]
    - [gpe/qif_gpe/R_i, stn/qif_stn/GPe, null, {weight: 1.0, delay: 0.004, spread: 0.001}]

net_stn_gpe:
  base: CircuitTemplate
  nodes:
    stn_gpe: pop_stn_gpe

delay_net:
  base: CircuitTemplate
  nodes:
    d: delay_pop
  edges:
    - [d/delay_test/r_out, d/delay_test/r_in, null, {weight: 1.0, delay: 0.004, spread: 0.001}]
