%YAML 1.2
---

# operators
###########

# basic excitatory montbrio population operator
Op_e_base:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau + J*r + r__e - r_i - tau*(PI*r)**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J:
      default: 15.
    delta:
      default: 1.0
    eta:
      default: -5.0
    r_e:
      default: input
    r_i:
      default: input
    i_in:
      default: input

# basic inhibitory montbrio population operator
Op_i_base:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau - J*r + r_e - r_i - tau*(PI*r)**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J:
      default: 20.
    delta:
      default: 1.0
    eta:
      default: -5.0
    r_e:
      default: input
    r_i:
      default: input
    i_in:
      default: input

# excitatory montbrio population operator with adaptation current
Op_e_adapt:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau + J*(1.0-tanh(e))*r + r_e - r_i - tau*(PI*r)**2'
    - 'd/dt * e = a'
    - 'd/dt * a = alpha*r/tau_a - 2.*a/tau_a - e/tau_a**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 1.0
    J:
      default: 21.2132
    delta:
      default: 2.0
    eta:
      default: -4.9
    i_in:
      default: input
    e:
      default: variable
    a:
      default: variable
    alpha:
      default: 0.05
    tau_a:
      default: 10.0
    r_e:
      default: input
    r_i:
      default: input

# basic inhibitory montbrio population operator with firing threshold adaptation
Op_i_adapt:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau - J*(1.0-tanh(e))*r + r_e - r_i- tau*(PI*r)**2'
    - 'd/dt * e = a'
    - 'd/dt * a = alpha*r/tau_a - 2.*a/tau_a - e/tau_a**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 1.0
    J:
      default: 15.
    delta:
      default: 2.0
    eta:
      default: -4.9
    i_in:
      default: input
    e:
      default: variable
    a:
      default: variable
    alpha:
      default: 0.05
    tau_a:
      default: 10.0
    r_e:
      default: input
    r_i:
      default: input

# excitatory montbrio population operator extended with a conductance-based synapses
Op_e_syn:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau + J * z - tau*(PI*r)**2'
    - 'd/dt * z = (beta*r - z) / tau_z'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J:
      default: 15.
    delta:
      default: 1.0
    eta:
      default: -5.0
    i_in:
      default: input
    z:
      default: variable
    tau_z:
      default: 0.001
    beta:
      default: 1.0

# inhibitory montbrio population operator extended with firing threshold adaptation and exponential synapses
Op_i_syn:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau - J*z - tau*(PI*r)**2'
    - 'd/dt * z = (r*beta - z) / tau_z'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J:
      default: 15.
    delta:
      default: 1.0
    eta:
      default: -5.0
    i_in:
      default: input
    z:
      default: variable
    tau_z:
      default: 0.002
    beta:
      default: 2.0

# excitatory montbrio population operator extended with firing threshold adaptation and exponential synapses
Op_e:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau + (J_0 - J)*s - tau*(PI*r)**2'
    - 'd/dt * J = a'
    - 'd/dt * a = alpha/tau_a * s - 2.*a/tau_a - J/tau_a**2'
    - 'd/dt * s = u'
    - 'd/dt * u = beta/tau_s * (r + r_e - r_i) - 2.*u/tau_s - s/tau_s**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J_0:
      default: 15.
    delta:
      default: 1.0
    eta:
      default: -2.0
    i_in:
      default: input
    J:
      default: variable
    a:
      default: variable
    alpha:
      default: 3.
    tau_a:
      default: 0.1
    s:
      default: variable
    u:
      default: variable
    beta:
      default: 10000.0
    tau_s:
      default: 0.0001
    r_e:
      default: input
    r_i:
      default: input

# inhibitory montbrio population operator extended with firing threshold adaptation and exponential synapses
Op_i:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = delta/(PI * tau**2) + 2.*r*v/tau'
    - 'd/dt * v = (v**2 + eta + i_in) / tau - (J_0 - J)*s - tau*(PI*r)**2'
    - 'd/dt * J = a'
    - 'd/dt * a = alpha/tau_a * s - 2.*a/tau_a - J/tau_a**2'
    - 'd/dt * s = u'
    - 'd/dt * u = beta/tau_s * (r + r_e - r_i) - 2.*u/tau_s - s/tau_s**2'
  variables:
    r:
      default: output
    v:
      default: variable
    tau:
      default: 0.02
    J_0:
      default: 15.
    delta:
      default: 1.0
    eta:
      default: -5.0
    i_in:
      default: input
    J:
      default: variable
    a:
      default: variable
    alpha:
      default: 3.
    tau_a:
      default: 0.1
    s:
      default: variable
    u:
      default: variable
    beta:
      default: 1000.0
    tau_s:
      default: 0.001
    r_e:
      default: input
    r_i:
      default: input



# populations
#############

# base excitatory montbrio population
Pop_e_base:
  base: NodeTemplate
  operators:
    - Op_e_base

# base inhibitory montbrio population
Pop_i_base:
  base: NodeTemplate
  operators:
    - Op_i_base

# excitatory montbrio population with short-term firing rate adaptation
Pop_e_adapt:
  base: NodeTemplate
  operators:
    - Op_e_adapt

# inhibitory montbrio population with short-term firing rate adaptation
Pop_i_adapt:
  base: NodeTemplate
  operators:
    - Op_i_adapt

# excitatory montbrio population with alpha kernel synapses
Pop_e_syn:
  base: NodeTemplate
  operators:
    - Op_e_syn

# inhibitory montbrio population with alpha kernel synapses
Pop_i_syn:
  base: NodeTemplate
  operators:
    - Op_i_syn

# extended excitatory monbtrio population (synapses + short term plasticity)
Pop_e:
  base: NodeTemplate
  operators:
    - Op_e

# extended inhibitory monbtrio population (synapses + short term plasticity)
Pop_i:
  base: NodeTemplate
  operators:
    - Op_i


# edges
#######

DummyEdge:
  base: EdgeTemplate
  operators: []


# circuits
##########

EI_base:
  base: CircuitTemplate
  nodes:
    E: Pop_e_base
    I: Pop_i_base

EI_adapt:
  base: CircuitTemplate
  nodes:
    E: Pop_e_adapt
    I: Pop_i_adapt
  edges:
    - [E/Op_e_adapt/r, I/Op_i_adapt/r_e, DummyEdge, {weight: 5.0}]
    - [I/Op_i_adapt/r, E/Op_e_adapt/r_i, DummyEdge, {weight: 5.0}]

E_adapt:
  base: CircuitTemplate
  nodes:
    E: Pop_e_adapt

EI_syn:
  base: CircuitTemplate
  nodes:
    E: Pop_e_syn
    I: Pop_i_syn

EI:
  base: CircuitTemplate
  nodes:
    E: Pop_e
    I: Pop_i

EIC:
  base: CircuitTemplate
  nodes:
    E: Pop_e
    I: Pop_i
  edges:
    - [E/Op_e/r, I/Op_i/r_in_e, DummyEdge, {weight: 5.0}]
    - [I/Op_i/r, E/Op_e/r_in_i, DummyEdge, {weight: 5.0}]

CMC:
  base: CircuitTemplate
  circuits:
    L3: EIC
    L5: EIC
  edges:
    - [L3/PC/Op_e/r, L5/IIN/Op_i/r_in_e, DummyEdge, {weight: 0.1}]
    - [L3/PC/Op_e/r, L5/PC/Op_e/r_in_e, DummyEdge, {weight: 0.1}]
    - [L5/PC/Op_e/r, L3/IIN/Op_i/r_in_e, DummyEdge, {weight: 0.1}]
